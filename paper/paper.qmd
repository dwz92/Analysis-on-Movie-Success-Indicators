---
title: "Analysis on Movie Success Indicators"
author: 
  - Qi Er (Emma) Teng
thanks: "Code and data are available at: https://github.com/dwz92/Analysis-on-Movie-Success-Indicators."
date: today
date-format: long
abstract: "In this study, we delve into the variables contributing to movie success, focusing on the interplay between a moviesâ€™ genre, number of theaters showing, the moth of release, and the year of premiere, particularly in the context of the pre and post-COVID-19 era, spanning from 2019 to 2022. This comprehensive analysis aims to shed light on the nuanced relationship between these variables and movie success, highlighting how the cinematic landscape has evolved in response to the COVID-19 pandemic. The findings of this study enrich our understanding of the determinants of cinematic success, providing valuable insights for filmmakers, distributors, and industry strategists in navigating the changing film industry."
format: html
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(dplyr)
library(arrow)
library(here)
library(kableExtra)
library(ggrepel)
```


# Introduction

In the realm of global entertainment, movies hold a pivotal role, not only as a form of artistic expression but also as a significant driver of cultural and economic activity. The advent of COVID-19 has precipitated profound changes across the global media landscape, altering audience behaviors and consumption patterns. The surge in online media consumption during the pandemic has brought unprecedented challenges and transformations to the traditional movie industry. This shift has prompted a reevaluation of what factors contribute to a movie's success in an era where digital platforms are increasingly dominating. Against this backdrop, this paper aims to analyze several indicators related to movie success, taking into account the impact of COVID-19 on both the production and consumption of films. By examining the interplay between various factors and movie ratings, this study seeks to uncover insights into the dynamics of movie success in a rapidly evolving media environment.

Employing a multifaceted analytical approach that combines genre classification, theaters metrics, seasonal release timing, and annual trends, we probed the determinants of cinematic success in the fluctuating entertainment landscape from 2019 to 2022. Our study meticulously compiled data from Box Office Mojo and IMDb, focusing on films that achieved a commendable rating of 7/10 or above, signifying both critical and popular acclaim. Through the application of advanced statistical techniques and web scraping tools, we dissected the top 200 grossing films to unravel the intricate relationship between these variables and their collective impact on a movie's success. A higher performance in these metrics typically correlates with a movie's ability to resonate with diverse audiences, navigate distribution challenges, and capitalize on favorable release windows. This analysis not only sheds light on the evolving criteria for what makes a movie successful in the digital age but also offers insights into the strategic considerations filmmakers and distributors must weigh in an increasingly competitive and segmented market.

The paper is structured to facilitate a comprehensive understanding of the study and its implications. Following Section 1, Section 2 presents the data, detailing the data sources, analytical techniques, and the rationale behind the chosen methods. Section 4 discusses the results. Section 5 provides an in-depth discussion of these findings.




# Data {#sec-data}

//TODO

## Dataset Introduction

```{r}
#| label: tbl-mov1922-mojo
#| tbl-cap: Top 10 Total Gross Value Release from 2019
#| echo: false

mov1922 <- read_parquet(here::here("data/analysis_data/mov1922.parquet"))

mov1922 |>
  select(release, release_year, release_date, theaters, total_gross) |>
  slice(1:10) |>
  kable(
    col.names = c("Title", "Release Year", "Release Date", "Released Theaters", "Total Gross Value"),
    booktabs = TRUE
  )

```

Talk more about it.

// TODO

```{r}
#| label: tbl-basic-info
#| tbl-cap: First Ten Rows of Basic Information from IMDb
#| echo: false
#| warning: false
#| message: false

titlebasic <- read_parquet(here::here("data/analysis_data/titlebasicraw.parquet"))

titlebasic |>
  select(originalTitle, startYear, genres, tconst) |>
  kable(
    col.names = c("Title", "Release Year", "Genres", "IMDb primary key"),
    booktabs = TRUE
  )
```

//TODO

```{r}
#| label: tbl-rating
#| tbl-cap: First Ten Rows of Movie Rating from IMDb
#| echo: false
#| warning: false
#| message: false

titlerate <- read_parquet(here::here("data/analysis_data/titlerateraw.parquet"))

titlerate |>
  select(averageRating, numVotes, tconst) |>
  kable(
    col.names = c("Rating", "Number of Votes", "IMDb primary key"),
    booktabs = TRUE
  )
```

//TODO

## Variable

```{r}
#| label: tbl-rating-info
#| tbl-cap: First Ten Rows of Movie Rating and Basic Information
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

movcomb |>
  select(release, release_year, release_date, genres, averageRating, theaters) |>
  slice(1:10) |>
  kable(
    col.names = c("Title", "Release Year", "Release Date", "Genres", "Rating", "Released Theaters"),
    booktabs = TRUE
  )
```

//TODO

### Relationship between Movie Success from 2019 to 2022 by Release Theaters

```{r}
#| label: fig-2019-movie-success-theaters
#| fig-cap: Movie Success in 2019 by Release Theaters
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

mov2019 <- movcomb

mov2019 <- mov2019 |>
  filter(release_year == 2019)

ggplot(mov2019, aes(x = plot_date, y = averageRating, fill = theaters)) +
  geom_point(shape = 21, size = 4) +
  ggtitle("Movie Success in 2019 by Release Theaters") +
  labs(x = "Month of Release",
       y = "Average Rating",
       fill = "Release Theaters") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 month") +
  scale_fill_gradient(low = "lightblue", high = "darkred") +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right")
```


//TODO

```{r}
#| label: fig-2020-movie-success-theaters
#| fig-cap: Movie Success in 2020 by Release Theaters
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

mov2020 <- movcomb

mov2020 <- mov2020 |>
  filter(release_year == 2020)

ggplot(mov2020, aes(x = plot_date, y = averageRating, fill = theaters)) +
  geom_point(shape = 21, size = 4) +
  ggtitle("Movie Success in 2020 by Release Theaters") +
  labs(x = "Month of Release",
       y = "Average Rating",
       fill = "Release Theaters") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 month") +
  scale_fill_gradient(low = "lightblue", high = "darkred") +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right")
```

//TODO

```{r}
#| label: fig-2021-movie-success-theaters
#| fig-cap: Movie Success in 2021 by Release Theaters
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

mov2021 <- movcomb

mov2021 <- mov2021 |>
  filter(release_year == 2021)

ggplot(mov2021, aes(x = plot_date, y = averageRating, fill = theaters)) +
  geom_point(shape = 21, size = 4) +
  ggtitle("Movie Success in 2021 by Release Theaters") +
  labs(x = "Month of Release",
       y = "Average Rating",
       fill = "Release Theaters") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 month") +
  scale_fill_gradient(low = "lightblue", high = "darkred") +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right")
```


//TODO

```{r}
#| label: fig-2022-movie-success-theaters
#| fig-cap: Movie Success in 2022 by Release Theaters
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

mov2022 <- movcomb

mov2022 <- mov2022 |>
  filter(release_year == 2022)

ggplot(mov2022, aes(x = plot_date, y = averageRating, fill = theaters)) +
  geom_point(shape = 21, size = 4) +
  ggtitle("Movie Success in 2022 by Release Theaters") +
  labs(x = "Month of Release",
       y = "Average Rating",
       fill = "Release Theaters") +
  scale_x_date(date_labels = "%b %d", date_breaks = "1 month") +
  scale_fill_gradient(low = "lightblue", high = "darkred") +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "right")
```


//TODO

```{r}
#| label: fig-2019-movie-success-genre
#| fig-cap: Movie Success in 2019 by Genre
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

df_long <- movcomb

df_long <- df_long |>
  filter(release_year == 2019) |>
  separate_rows(genres, sep = ",") |>
  mutate(genres = trimws(genres)) |>
  group_by(genres) |>
  summarise(
    
    averageRating = mean(averageRating, na.rm = TRUE),
    numRele = sum(theaters, na.rm = TRUE)
  )


# Create the plot
ggplot(df_long, aes(x = reorder(genres, numRele), y = averageRating, size = numRele, label = genres)) +
  geom_point(alpha = 0.5, color = "lightblue") +
  geom_text_repel(
    aes(label = genres),
    size = 5,  
    max.overlaps = Inf, 
    point.padding = NA,
    box.padding = 0.35,
    segment.color = NA 
  ) +
  scale_size_continuous(range = c(5, 30)) +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Genre", y = "Average Rating", title = "Movie Ratings by Genre in 2019")
```

//TODO

```{r}
#| label: fig-2020-movie-success-genre
#| fig-cap: Movie Success in 2020 by Genre
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

df_long <- movcomb

df_long <- df_long |>
  filter(release_year == 2020) |>
  separate_rows(genres, sep = ",") |>
  mutate(genres = trimws(genres)) |>
  group_by(genres) |>
  summarise(
    
    averageRating = mean(averageRating, na.rm = TRUE),
    numRele = sum(theaters, na.rm = TRUE)
  )


# Create the plot
ggplot(df_long, aes(x = reorder(genres, numRele), y = averageRating, size = numRele, label = genres)) +
  geom_point(alpha = 0.5, color = "lightblue") +
  geom_text_repel(
    aes(label = genres),
    size = 5,  
    max.overlaps = Inf, 
    point.padding = NA,
    box.padding = 0.35,
    segment.color = NA 
  ) +
  scale_size_continuous(range = c(5, 30)) +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Genre", y = "Average Rating", title = "Movie Ratings by Genre in 2020")
```

//TODO

```{r}
#| label: fig-2021-movie-success-genre
#| fig-cap: Movie Success in 2021 by Genre
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

df_long <- movcomb

df_long <- df_long |>
  filter(release_year == 2021) |>
  separate_rows(genres, sep = ",") |>
  mutate(genres = trimws(genres)) |>
  group_by(genres) |>
  summarise(
    
    averageRating = mean(averageRating, na.rm = TRUE),
    numRele = sum(theaters, na.rm = TRUE)
  )


# Create the plot
ggplot(df_long, aes(x = reorder(genres, numRele), y = averageRating, size = numRele, label = genres)) +
  geom_point(alpha = 0.5, color = "lightblue") +
  geom_text_repel(
    aes(label = genres),
    size = 5,  
    max.overlaps = Inf, 
    point.padding = NA,
    box.padding = 0.35,
    segment.color = NA 
  ) +
  scale_size_continuous(range = c(5, 30)) +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Genre", y = "Average Rating", title = "Movie Ratings by Genre in 2021")
```

//TODO

```{r}
#| label: fig-2022-movie-success-genre
#| fig-cap: Movie Success in 2022 by Genre
#| echo: false
#| warning: false
#| message: false

movcomb <- read_parquet(here::here("data/analysis_data/movcomb.parquet"))

df_long <- movcomb

df_long <- df_long |>
  filter(release_year == 2022) |>
  separate_rows(genres, sep = ",") |>
  mutate(genres = trimws(genres)) |>
  group_by(genres) |>
  summarise(
    
    averageRating = mean(averageRating, na.rm = TRUE),
    numRele = sum(theaters, na.rm = TRUE)
  )


# Create the plot
ggplot(df_long, aes(x = reorder(genres, numRele), y = averageRating, size = numRele, label = genres)) +
  geom_point(alpha = 0.5, color = "lightblue") +
  geom_text_repel(
    aes(label = genres),
    size = 5,  
    max.overlaps = Inf, 
    point.padding = NA,
    box.padding = 0.35,
    segment.color = NA 
  ) +
  scale_size_continuous(range = c(5, 30)) +
  geom_hline(yintercept = 7, linetype = "dashed", color = "red") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Genre", y = "Average Rating", title = "Movie Ratings by Genre in 2022")
```

//TODO

# Model

//TODO

## Model set-up

//TODO


\begin{align} 
y_i|\mu_i &\sim \mbox{Bern}(\mu_i) \\
logit(\mu_i) &= \beta_0 + \beta_{y[i]}^{year} + \beta_{t[i]}^{theater} \\
\beta_0 &\sim \mbox{Normal}(0, 2.5) \\
\beta_{y[i]}^{year} &\sim \mbox{Normal}(0, 2.5) for \space y = 2019, 2020, 2021, 2022 \\
\\beta_{t[i]}^{theater} &\sim  \mbox{Normal}(0, 2.5) for \space t = 0, T
\end{align} 

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


### Model justification

//TODO

### Model prediction

//TODO

# Results

//TODO

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(rstanarm)


```

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false


```




# Discussion

## First discussion point {#sec-first-point}

//TODO

## Second discussion point

## Third discussion point

## Weaknesses and next steps

//TODO

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

//TODO

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]


```

## Diagnostics
//TODO

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2


```



\newpage


# References


